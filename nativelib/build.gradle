plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 25
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.18.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        androidResources false
        prefabPublishing true
        buildConfig false
    }

    prefab {
        "nativelib" {
            headers "src/main/cpp/include"
        }
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

def groupName = 'custom'

task beforeBuildSDK {
    setGroup(groupName)
    doFirst {
        println("beforeBuildSDK!!!")
    }
}

task afterBuildSDK {
    setGroup(groupName)
    doFirst {
        println("afterBuildSDK!!!")
    }
}

afterEvaluate {
    android.libraryVariants.forEach { variant ->
        def buildTypeName = variant.buildType.name
        if (buildTypeName != 'release') return

        print(buildTypeName)
    }
    def aR = project.tasks.findByName("assembleRelease")
    def buildSDK = project.tasks.findByName("beforeBuildSDK")
    def afterBuildSDK = project.tasks.findByName("afterBuildSDK")
    aR.dependsOn(buildSDK)
    afterBuildSDK.dependsOn(aR)


    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                groupId = 'dev.alex.jitpack.nativelib'
                artifactId = 'release'
                version = '1.3'
            }
        }

        repositories {
            maven {
                name = 'myrepo'
                url = "${project.buildDir}/repo"
            }
        }
    }
}

tasks.register('generateRepo', Zip) {
    def publishTask = tasks.named('publishReleasePublicationToMyrepoRepository')
    from publishTask.map { it.getRepository().getUrl() }
    into 'mylibrary'
    archiveFileName.set('mylibrary.zip')
}
